{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Beamtime calibration suite Scripts for running during (or in-between) beamtimes to gather and analyze detectors. Repository file organization: /calibrationSuite: The library code lives here, and the functions can be imported into other scripts as such: from calibrationSuite.basicSuiteScript import * from calibrationSuite.fitFunctions import * from calibrationSuite.Stats import * from calibrationSuite.cluster import * (documentation on the library functionality is still to come, but example usage is seen in the /suite_scripts folder) /suite_scripts: scripts that use the calibrationSuite library code ('high-level scripts') /standalone_scripts: scripts that do not use the calibrationSuite library code ('high-level scripts') /tests: tests files, can be ran with 'pytest .' from the root project directory (Currently only test for the fitFunctions library file is running, more tests are to be added) /data: example data-files used for running the scripts Important branches: development: Contains the newest 'good' code, usually has new changes and bug fixes. main: Stable code used during beamtimes. The ode used during each beamtime is tagged.","title":"Home"},{"location":"#beamtime-calibration-suite","text":"Scripts for running during (or in-between) beamtimes to gather and analyze detectors.","title":"Beamtime calibration suite"},{"location":"#repository-file-organization","text":"/calibrationSuite: The library code lives here, and the functions can be imported into other scripts as such: from calibrationSuite.basicSuiteScript import * from calibrationSuite.fitFunctions import * from calibrationSuite.Stats import * from calibrationSuite.cluster import * (documentation on the library functionality is still to come, but example usage is seen in the /suite_scripts folder) /suite_scripts: scripts that use the calibrationSuite library code ('high-level scripts') /standalone_scripts: scripts that do not use the calibrationSuite library code ('high-level scripts') /tests: tests files, can be ran with 'pytest .' from the root project directory (Currently only test for the fitFunctions library file is running, more tests are to be added) /data: example data-files used for running the scripts","title":"Repository file organization:"},{"location":"#important-branches","text":"development: Contains the newest 'good' code, usually has new changes and bug fixes. main: Stable code used during beamtimes. The ode used during each beamtime is tagged.","title":"Important branches:"},{"location":"logging/","text":"Logging Logging calls are added to the library code, and also to various files in /suite_scripts to act as examples of generating logs from both the library and high-level scripts. Using the following method will append log messages to the log-file if it already exists, or create a new log-file if the file doesn't exist. If you want a new log-file for each run of a high-level script, atm you will need to rename the log-file after each run so a new one will be generated. To have your high-level script generate logs from the calibrationSuite library code, add the following at the top of the script: import os import calibrationSuite.loggingSetup as ls currFileName = os.path.basename(__file__) ls.setupScriptLogging(currFileName[:-3] + \".log\", logging.INFO) You can pass a chosen log-file name to the setupScriptLogging function, but using the above will create and write to file named .log To add additional logging from the high-level script itself(to the same file specified to setupScriptLogging), you can also add the following to the top of the script: import logging logger = logging.getLogger(__name__) Then can add log statements throughout the script with: logger.error(\"Example error msg!\") # for logging when the program goes wrong logger.exception(\"Example exception msg!) # for logging error and also including stack-trace in log logger.info(\"Example info msg!\") # for logging useful info on the state of the program (Note: these must take a statement evaluating to a single string, if a,b,c are strings can't do 'logger.info(a,b,c)' but can do 'logger.info(a+b+c)'. Also for example if a is an int, must do 'logger.info(str(a)))","title":"Logging"},{"location":"logging/#logging","text":"Logging calls are added to the library code, and also to various files in /suite_scripts to act as examples of generating logs from both the library and high-level scripts. Using the following method will append log messages to the log-file if it already exists, or create a new log-file if the file doesn't exist. If you want a new log-file for each run of a high-level script, atm you will need to rename the log-file after each run so a new one will be generated. To have your high-level script generate logs from the calibrationSuite library code, add the following at the top of the script: import os import calibrationSuite.loggingSetup as ls currFileName = os.path.basename(__file__) ls.setupScriptLogging(currFileName[:-3] + \".log\", logging.INFO) You can pass a chosen log-file name to the setupScriptLogging function, but using the above will create and write to file named .log To add additional logging from the high-level script itself(to the same file specified to setupScriptLogging), you can also add the following to the top of the script: import logging logger = logging.getLogger(__name__) Then can add log statements throughout the script with: logger.error(\"Example error msg!\") # for logging when the program goes wrong logger.exception(\"Example exception msg!) # for logging error and also including stack-trace in log logger.info(\"Example info msg!\") # for logging useful info on the state of the program (Note: these must take a statement evaluating to a single string, if a,b,c are strings can't do 'logger.info(a,b,c)' but can do 'logger.info(a+b+c)'. Also for example if a is an int, must do 'logger.info(str(a)))","title":"Logging"},{"location":"running/","text":"In order to run the library code, first execute the following cmd: source setup.sh (This must be ran in each new terminal session, or added to your ~/.bashrc file using the full path to setup.sh) This script just appends your cloned location of this library to your PYTHONPATH, so scripts in /suite_scripts and other locations on your machine can find the library code. Additionally you can specify which config file to use by setting the 'SUITE_CONFIG' environment variable, for example: export SUITE_CONFIG=\"rixSuiteConfig.py\" (relative or full paths work) You can also set the config-file using the '-cf' or '--configFile' cmd-line arguments (note: if set, the environment variable overrides this cmd-line option) If neither of the above are set, the suite will try to use suiteConfig.py. If no config file can be found and read, the library will fail-out early.","title":"Running"},{"location":"script_descriptions/","text":"Suite scripts: AnalyzeH5.py runAnalyzeH5.py runInfo.py searchForNonSwitching.py SimpleClustersParallel.py SimpleClustersParallelSlice.py simplePhotonCounter.py imeScan_jm.py roiFromSwitched.py analyze_npy.py batchModeXav.sh CalcNoiseAndMean.py DeltaTtest.py deprecatedLinearityPlotsParallel.py EventScanM.py EventScanParallel.py TimeScanParallel.py EventScanParallelSlice.py findMinSwitchValue.py histogramFluxEtc.py LinearityPlotsParallelSlice.py TimeScanParallelSlice.py TimeScanParallel_bhavna.py PersistenceCheckParallel.py persistenceCheck.py TimeScanParallelXav.py roiFromThreshold.py rixSuiteConfig.py Standalone scripts: cfg_utils.py dumpPVs.py plotWave8.py compareConfigs.py MapCompEnOn.py roiCombinationExample.py DamageCounter.py MapCompEnOnThreshold.py seabornTest.py Debugging.py nonBasicScript.py simpler_epixhr.py dumbBandPlotter.py OpenXav.py","title":"Script Descs"},{"location":"script_descriptions/#suite-scripts","text":"AnalyzeH5.py runAnalyzeH5.py runInfo.py searchForNonSwitching.py SimpleClustersParallel.py SimpleClustersParallelSlice.py simplePhotonCounter.py imeScan_jm.py roiFromSwitched.py analyze_npy.py batchModeXav.sh CalcNoiseAndMean.py DeltaTtest.py deprecatedLinearityPlotsParallel.py EventScanM.py EventScanParallel.py TimeScanParallel.py EventScanParallelSlice.py findMinSwitchValue.py histogramFluxEtc.py LinearityPlotsParallelSlice.py TimeScanParallelSlice.py TimeScanParallel_bhavna.py PersistenceCheckParallel.py persistenceCheck.py TimeScanParallelXav.py roiFromThreshold.py rixSuiteConfig.py","title":"Suite scripts:"},{"location":"script_descriptions/#standalone-scripts","text":"cfg_utils.py dumpPVs.py plotWave8.py compareConfigs.py MapCompEnOn.py roiCombinationExample.py DamageCounter.py MapCompEnOnThreshold.py seabornTest.py Debugging.py nonBasicScript.py simpler_epixhr.py dumbBandPlotter.py OpenXav.py","title":"Standalone scripts:"},{"location":"setup/","text":"Github and Git Setup these steps will get you setup for running and developing the calibration suite 1: Make a github.com account if you already have github account and want to use it, skip to step 2) else to make a new account follow the steps here: https://github.com/join your username can be anything, some people at slac use -slac convention (ex: nstelter-slac ) for email you can use your @slac.stanford.edu address or any other address if you want (just make sure to use the same email in step 4) you will need a code from your email for verification when creating the account 2: Register github account with \u2018SLAC Lab\u2019 github group first join \u2018#comp-general\u2019 channel on Slack when viewing this slack channel, should see \u2018Pinned\u2019 and next to it \u2018Workflows\u2019 at top of the page click \u2018Workflows\u2019 -> \u2018SLAC GitHub Access\u2019, and fill out the form with your info wait to receive an email asking you to join the \u2018SLAC Lab\u2019 group, and follow instructions in this email 3: Request write permissions for the repository after completing step 2) , your github account should be a member of the 'SLAC Lab' github group now go to https://github.com/orgs/slaclab/teams/beamtime_calibration_suite_devs and click the 'Request to join' button towards the upper-right of the page this will grant you write access to the repository (used for development and sharing code-changes during beamtime) 4: Setup terminal for next steps For the following steps 5) , 6) , 7) : make sure you terminal (linux or mac) is setup first with the following commands: (note: in the 1st command: replace \\<slac-username> with your slac unix account-name) ssh -Yt <slac-username>@s3dflogin.slac.stanford.edu source /sdf/group/lcls/ds/ana/sw/conda2/manage/bin/psconda.sh 5: Config local git settings Enter the following terminal commands: git config --global user.name <github username> git config --global user.email <email used to setup github account> #run one of the following cmds, depending on your preferred editor #(editor is used for editing files during some git operations) git config --global core.editor vim git config --global core.editor emacs 6: Setup SSH Keys for github on s3df First make sure you are logged into github account in browser Follow instructions under \u201cGenerating a new SSH key\u201d and \u201cAdding your SSH key to the ssh-agent\u201d: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key (make sure you have selected the 'Linux' tab near the top of the page, not 'Mac') Follow instructions under \u201cAdding a new SSH key to your account\u201d: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account (make sure you have selected the 'Linux' tab near the top of the page, not 'Mac') 5: Download repo cd to where you want the scripts to live (the scripts will be downloaded inside of a folder called \u2018beamtime-calibration-suite\u2019) I suggest inside your home directory ( \\~ ), or inside a new folder you make like ~/repos/ to download the repository, run the following command: git clone git@github.com:slaclab/beamtime-calibration-suite.git if an error occurs, SSH setup in step 6) may have had an issue and needs to be debugged if command was successful, you should be able to cd into newly created \u2018beamtime-calibration-suite\u2019 folder and see subfolders containing python code now get the 'development' branch by running command (this will you get the most up-to-date code when it's not during a beamtime): git checkout development","title":"Setup"},{"location":"setup/#github-and-git-setup","text":"these steps will get you setup for running and developing the calibration suite","title":"Github and Git Setup"},{"location":"setup/#1-make-a-githubcom-account","text":"if you already have github account and want to use it, skip to step 2) else to make a new account follow the steps here: https://github.com/join your username can be anything, some people at slac use -slac convention (ex: nstelter-slac ) for email you can use your @slac.stanford.edu address or any other address if you want (just make sure to use the same email in step 4) you will need a code from your email for verification when creating the account","title":"1: Make a github.com account"},{"location":"setup/#2-register-github-account-with-slac-lab-github-group","text":"first join \u2018#comp-general\u2019 channel on Slack when viewing this slack channel, should see \u2018Pinned\u2019 and next to it \u2018Workflows\u2019 at top of the page click \u2018Workflows\u2019 -> \u2018SLAC GitHub Access\u2019, and fill out the form with your info wait to receive an email asking you to join the \u2018SLAC Lab\u2019 group, and follow instructions in this email","title":"2: Register github account with \u2018SLAC Lab\u2019 github group"},{"location":"setup/#3-request-write-permissions-for-the-repository","text":"after completing step 2) , your github account should be a member of the 'SLAC Lab' github group now go to https://github.com/orgs/slaclab/teams/beamtime_calibration_suite_devs and click the 'Request to join' button towards the upper-right of the page this will grant you write access to the repository (used for development and sharing code-changes during beamtime)","title":"3: Request write permissions for the repository"},{"location":"setup/#4-setup-terminal-for-next-steps","text":"For the following steps 5) , 6) , 7) : make sure you terminal (linux or mac) is setup first with the following commands: (note: in the 1st command: replace \\<slac-username> with your slac unix account-name) ssh -Yt <slac-username>@s3dflogin.slac.stanford.edu source /sdf/group/lcls/ds/ana/sw/conda2/manage/bin/psconda.sh","title":"4: Setup terminal for next steps"},{"location":"setup/#5-config-local-git-settings","text":"Enter the following terminal commands: git config --global user.name <github username> git config --global user.email <email used to setup github account> #run one of the following cmds, depending on your preferred editor #(editor is used for editing files during some git operations) git config --global core.editor vim git config --global core.editor emacs","title":"5: Config local git settings"},{"location":"setup/#6-setup-ssh-keys-for-github-on-s3df","text":"First make sure you are logged into github account in browser Follow instructions under \u201cGenerating a new SSH key\u201d and \u201cAdding your SSH key to the ssh-agent\u201d: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key (make sure you have selected the 'Linux' tab near the top of the page, not 'Mac') Follow instructions under \u201cAdding a new SSH key to your account\u201d: https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account#adding-a-new-ssh-key-to-your-account (make sure you have selected the 'Linux' tab near the top of the page, not 'Mac')","title":"6: Setup SSH Keys for github on s3df"},{"location":"setup/#5-download-repo","text":"cd to where you want the scripts to live (the scripts will be downloaded inside of a folder called \u2018beamtime-calibration-suite\u2019) I suggest inside your home directory ( \\~ ), or inside a new folder you make like ~/repos/ to download the repository, run the following command: git clone git@github.com:slaclab/beamtime-calibration-suite.git if an error occurs, SSH setup in step 6) may have had an issue and needs to be debugged if command was successful, you should be able to cd into newly created \u2018beamtime-calibration-suite\u2019 folder and see subfolders containing python code now get the 'development' branch by running command (this will you get the most up-to-date code when it's not during a beamtime): git checkout development","title":"5: Download repo"}]}